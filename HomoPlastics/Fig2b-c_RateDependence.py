
from __future__ import division

import numpy as np
import matplotlib.pyplot as plt
import json
import os, sys
mod_path = os.path.abspath(os.path.join('..','Model'))
sys.path.append(mod_path)
from oo_Parameters import *
from MorphologyData import *

#start_scope()

######################################################
## Load Morpho
######################################################
#morph = '../Model/Branco2010_Morpho.swc'
#morph_data = BrancoData
morph = '../Model/Acker2008.swc'
morph_data = AckerData
loc1 = 'basal'   #'tuft','apical','basal'
print('loc1: ',loc1)
if loc1 == 'tuft':
    distComps = distal_Acker_tuft
    proxComps = proximal_Acker_tuft
elif loc1 == 'apical':
    distComps = distal_Acker_apical
    proxComps = proximal_Acker_apical
elif loc1 == 'basal':
    distComps = distal_Acker_basal
    proxComps = proximal_Acker_basal
else:
    print('Error!')
    sys.exit(1)
branchNr = len(proxComps)
print('branchNr: ',branchNr)
d_compartm = proxComps+distComps
nrIn = len(d_compartm)
#nrIn = len(proxComps)
#d_compartm = []
#for ii in range(nrIn):
#    d_compartm.append(int(0.5*(distComps[ii]+proxComps[ii])))
hz_array =  np.array([0.1,5.,10.,15.,20.,25.,30.,35.,40.,45.,50.])   #np.array([0.1,5.,10.,15.,20.,25.,30.,35.,40.,45.,50.])
nrHz = hz_array.size

synmodel = 'Chen'   # synmodel = 'Chen' , synmodel = 'Clopath', synmodel = 'nonPlast'
print('synmodel: ',synmodel)

init_weight = 0.5
ME_A = 0.02
ME_Vrhigh = -60*mV
ME_Ar = 0.2
MEmaxRatio = 175.0
MEtau = 2.0*second

ChenW1 = np.zeros((nrIn,nrHz))
ChenEr1 = np.zeros((nrIn,nrHz))
ChenEf1 = np.zeros((nrIn,nrHz))
ChenMEdamp1 = np.zeros((nrIn,nrHz))
ChenMEmax1 = np.zeros((nrIn,nrHz))
ChenPE1 = np.zeros((nrIn,nrHz))
ChenW2 = np.zeros((nrIn,nrHz))
ChenEr2 = np.zeros((nrIn,nrHz))
ChenEf2 = np.zeros((nrIn,nrHz))
ChenMEdamp2 = np.zeros((nrIn,nrHz))
ChenMEmax2 = np.zeros((nrIn,nrHz))
ChenPE2 = np.zeros((nrIn,nrHz))
for zzz in range(nrIn):
    titlestr = 'DataRateDependence/'+synmodel+'_'+loc1+'_'+str(init_weight)+'_'+str(ME_A)+'_'+str(ME_Vrhigh/mV)+'_'+str(ME_Ar)+'_'+str(MEmaxRatio)+'_'+str(MEtau/second)+'_'+str(d_compartm[zzz])  
    data1 = open(titlestr+'_w1.txt','r')
    data2 = open(titlestr+'_w2.txt','r')
    ChenW1[zzz,:] = json.load(data1)
    ChenW2[zzz,:] = json.load(data2)
    data1.close()
    data2.close()	
    data1 = open(titlestr+'_Er1.txt','r')
    data2 = open(titlestr+'_Er2.txt','r')
    ChenEr1[zzz,:] = json.load(data1)
    ChenEr2[zzz,:] = json.load(data2)
    data1.close()
    data2.close()	
    data1 = open(titlestr+'_Ef1.txt','r')
    data2 = open(titlestr+'_Ef2.txt','r')
    ChenEf1[zzz,:] = json.load(data1)
    ChenEf2[zzz,:] = json.load(data2)
    data1.close()
    data2.close()
    data1 = open(titlestr+'_MEdamp1.txt','r')
    data2 = open(titlestr+'_MEdamp2.txt','r')
    ChenMEdamp1[zzz,:] = json.load(data1)
    ChenMEdamp2[zzz,:] = json.load(data2)
    data1.close()
    data2.close()
    data1 = open(titlestr+'_MEmax1.txt','r')
    data2 = open(titlestr+'_MEmax2.txt','r')
    ChenMEmax1[zzz,:] = json.load(data1)
    ChenMEmax2[zzz,:] = json.load(data2)
    data1.close()
    data2.close()
    data1 = open(titlestr+'_PE1.txt','r')
    data2 = open(titlestr+'_PE2.txt','r')
    ChenPE1[zzz,:] = json.load(data1)
    ChenPE2[zzz,:] = json.load(data2)
    data1.close()
    data2.close()

ChenW1mean = 100.0*np.mean(ChenW1,axis=0)/init_weight
ChenW1std = 100.0*np.std(ChenW1,axis=0)    #/np.sqrt(ChenW1.shape[0])
ChenW2mean = 100.0*np.mean(ChenW2,axis=0)/init_weight
ChenW2std = 100.0*np.std(ChenW2,axis=0)    #/np.sqrt(ChenW2.shape[0])	
ChenEr1mean = np.mean(ChenEr1,axis=0)
ChenEr1std = np.std(ChenEr1,axis=0)    #/np.sqrt(ChenEr1.shape[0])
ChenEr2mean = np.mean(ChenEr2,axis=0)
ChenEr2std = np.std(ChenEr2,axis=0)    #/np.sqrt(ChenEr2.shape[0])	
ChenEf1mean = np.mean(ChenEf1,axis=0)
ChenEf1std = np.std(ChenEf1,axis=0)    #/np.sqrt(ChenEf1.shape[0])
ChenEf2mean = np.mean(ChenEf2,axis=0)
ChenEf2std = np.std(ChenEf2,axis=0)    #/np.sqrt(ChenEf2.shape[0])
ChenMEdamp1mean = np.mean(ChenMEdamp1,axis=0)
ChenMEdamp1std = np.std(ChenMEdamp1,axis=0)    #/np.sqrt(ChenMEdamp1.shape[0])
ChenMEdamp2mean = np.mean(ChenMEdamp2,axis=0)
ChenMEdamp2std = np.std(ChenMEdamp2,axis=0)    #/np.sqrt(ChenMEdamp2.shape[0])
ChenMEmax1mean = np.mean(ChenMEmax1,axis=0)
ChenMEmax1std = np.std(ChenMEmax1,axis=0)    #/np.sqrt(ChenMEmax1.shape[0])
ChenMEmax2mean = np.mean(ChenMEmax2,axis=0)
ChenMEmax2std = np.std(ChenMEmax2,axis=0)    #/np.sqrt(ChenMEmax2.shape[0])
ChenPE1mean = np.mean(ChenPE1,axis=0)
ChenPE1std = np.std(ChenPE1,axis=0)    #/np.sqrt(ChenPE1.shape[0])
ChenPE2mean = np.mean(ChenPE2,axis=0)
ChenPE2std = np.std(ChenPE2,axis=0)    #/np.sqrt(ChenPE2.shape[0])

hz_array_Free =  np.array([0.1,5.,10.,15.,20.,25.,30.,35.,40.,45.,50.])   #np.array([0.1,5.,10.,15.,20.,25.,30.,35.,40.,45.,50.])
nrHz_Free = hz_array_Free.size
ChenW1_Free = np.zeros((nrIn,nrHz_Free))
ChenEr1_Free = np.zeros((nrIn,nrHz_Free))
ChenEf1_Free = np.zeros((nrIn,nrHz_Free))
ChenPE1_Free = np.zeros((nrIn,nrHz_Free))
ChenW2_Free = np.zeros((nrIn,nrHz_Free))
ChenEr2_Free = np.zeros((nrIn,nrHz_Free))
ChenEf2_Free = np.zeros((nrIn,nrHz_Free))
ChenPE2_Free = np.zeros((nrIn,nrHz_Free))
for zzz in range(nrIn):
    titlestr = 'DataRateDependence_Free/'+synmodel+'_'+loc1+'_'+str(init_weight)+'_'+str(ME_A)+'_'+str(ME_Vrhigh/mV)+'_'+str(ME_Ar)+'_'+str(d_compartm[zzz])  
    data1 = open(titlestr+'_w1.txt','r')
    data2 = open(titlestr+'_w2.txt','r')
    ChenW1_Free[zzz,:] = json.load(data1)
    ChenW2_Free[zzz,:] = json.load(data2)
    data1.close()
    data2.close()	
    data1 = open(titlestr+'_Er1.txt','r')
    data2 = open(titlestr+'_Er2.txt','r')
    ChenEr1_Free[zzz,:] = json.load(data1)
    ChenEr2_Free[zzz,:] = json.load(data2)
    data1.close()
    data2.close()	
    data1 = open(titlestr+'_Ef1.txt','r')
    data2 = open(titlestr+'_Ef2.txt','r')
    ChenEf1_Free[zzz,:] = json.load(data1)
    ChenEf2_Free[zzz,:] = json.load(data2)
    data1.close()
    data2.close()
    data1 = open(titlestr+'_PE1.txt','r')
    data2 = open(titlestr+'_PE2.txt','r')
    ChenPE1_Free[zzz,:] = json.load(data1)
    ChenPE2_Free[zzz,:] = json.load(data2)
    data1.close()
    data2.close()

ChenW1mean_Free = 100.0*np.mean(ChenW1_Free,axis=0)/init_weight
ChenW1std_Free = 100.0*np.std(ChenW1_Free,axis=0)    #/np.sqrt(ChenW1_Free.shape[0])
ChenW2mean_Free = 100.0*np.mean(ChenW2_Free,axis=0)/init_weight
ChenW2std_Free = 100.0*np.std(ChenW2_Free,axis=0)    #/np.sqrt(ChenW2_Free.shape[0])	
ChenEr1mean_Free = np.mean(ChenEr1_Free,axis=0)
ChenEr1std_Free = np.std(ChenEr1_Free,axis=0)    #/np.sqrt(ChenEr1_Free.shape[0])
ChenEr2mean_Free = np.mean(ChenEr2_Free,axis=0)
ChenEr2std_Free = np.std(ChenEr2_Free,axis=0)    #/np.sqrt(ChenEr2_Free.shape[0])	
ChenEf1mean_Free = np.mean(ChenEf1_Free,axis=0)
ChenEf1std_Free = np.std(ChenEf1_Free,axis=0)    #/np.sqrt(ChenEf1_Free.shape[0])
ChenEf2mean_Free = np.mean(ChenEf2_Free,axis=0)
ChenEf2std_Free = np.std(ChenEf2_Free,axis=0)    #/np.sqrt(ChenEf2_Free.shape[0])
ChenPE1mean_Free = np.mean(ChenPE1_Free,axis=0)
ChenPE1std_Free = np.std(ChenPE1_Free,axis=0)    #/np.sqrt(ChenPE1_Free.shape[0])
ChenPE2mean_Free = np.mean(ChenPE2_Free,axis=0)
ChenPE2std_Free = np.std(ChenPE2_Free,axis=0)    #/np.sqrt(ChenPE2_Free.shape[0])

	
expfrq = np.array([0.1,10,20,40,50])
expW1mean = 100.0*(np.array([-0.04,0.14,0.29,0.53,0.56])+1.0)
expW1std = 100.0*np.array([0.05,0.1,0.14,0.11,0.26])
expW2mean = 100.0*(np.array([-0.29,-0.41,-0.34,0.56,0.75])+1.0)
expW2std = 100.0*np.array([0.08,0.11,0.1,0.32,0.19])
##------- STDP: [257_7]Tab.1 from [257_8]Fig.1D and Fig.7B -------
##firing rate(Hz): np.array([0.1,10,20,40,50])
## dt(ms): 10
## wmean: np.array([-0.04,0.14,0.29,0.53,0.56])
## wSEM: np.array([0.05,0.1,0.14,0.11,0.26])
## dt(ms): -10
## wmean: np.array([-0.29,-0.41,-0.34,0.56,0.75])
## wSEM: np.array([0.08,0.11,0.1,0.32,0.19])
##-------
##firing rate(Hz): 20
## dt(ms): np.array([-10,10])
## wmean: np.array([-0.34,0.29])
## wSEM: np.array([0.1,0.14])

#fig, ax = plt.subplots(1, 1, figsize=(1.4, 1.0))
fig, ax = plt.subplots(1, 1, figsize=(2.0, 1.4))
fig.subplots_adjust(left=0.3, right=0.9, bottom=0.3, top=0.9)
#fig, ax = plt.subplots(1, 1, figsize=(2, 1.4))
#fig.subplots_adjust(left=.15, right=.95, bottom=.15, top=.95)
plt.sca(ax)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.tick_params(direction='out',length=2,labelcolor=(0.5,0.5,0.5))
ax.set_xlim(-2, 52)
#ax.set_ylim(-0.52, 1.02)
plt.xticks([0,10,20,30,40,50],fontsize=6,fontname='Times New Roman')
plt.yticks(fontsize=6,fontname='Times New Roman')
ax.plot(hz_array,sign(ChenPE1mean)*(ChenMEdamp1mean*ChenMEmax1mean+MESmax0),'--r',linewidth=1.,label='$\itP_{max}$')
ax.plot(hz_array,ChenPE1mean,'-k',linewidth=1.,label='$\itP$')
#ax.plot(hz_array,ChenPE1mean+ChenPE1std,'-k',linewidth=0.1)
#ax.plot(hz_array,ChenPE1mean-ChenPE1std,'-k',linewidth=0.1)
#ax.fill_between(hz_array,ChenPE1mean+ChenPE1std,ChenPE1mean-ChenPE1std,color=(0.95,0.95,0.95),alpha=0.1)
ax.plot(hz_array_Free,ChenPE1mean_Free,'-b',linewidth=1.)    #,label='$\itP_{free}$'
ax.plot(hz_array_Free,ChenPE1mean_Free+ChenPE1std_Free,'-b',linewidth=0.1)
ax.plot(hz_array_Free,ChenPE1mean_Free-ChenPE1std_Free,'-b',linewidth=0.1)
ax.fill_between(hz_array_Free,ChenPE1mean_Free+ChenPE1std_Free,ChenPE1mean_Free-ChenPE1std_Free,color=(0.95,0.95,1.0),alpha=0.1)
ax.legend(loc='lower right',prop={'family':'Times New Roman','size':5},frameon=True,framealpha=0.1,ncol=1)
#legend1 = ax.legend(bbox_to_anchor=(1.0, 1.0), loc='upper left',prop={'family':'Times New Roman','size':4},borderaxespad=0.,title='$\itMER_{max}$ [fJ/($\mu m^2$*s)]')
#legend1.get_title().set_fontsize(fontsize = 6)
#legend1.get_title().set_fontname(fontname='Times New Roman')
#plt.axhline(0,linestyle='--',color='k',linewidth=0.2)
#plt.xlabel('Pairing frequency (Hz)',fontdict={'family': 'Times New Roman','size':8})
plt.ylabel('Potential energy\n(fJ/$\mu m^2$)',fontdict={'family': 'Times New Roman','size':8})
plt.savefig('./IMG/'+'Fig2ba.eps', format='eps', dpi=1000)
plt.show()	

#fig, ax = plt.subplots(1, 1, figsize=(1.4, 1.0))
fig, ax = plt.subplots(1, 1, figsize=(2.0, 1.4))
fig.subplots_adjust(left=0.3, right=0.9, bottom=0.3, top=0.9)
#fig, ax = plt.subplots(1, 1, figsize=(2, 1.4))
#fig.subplots_adjust(left=.15, right=.95, bottom=.15, top=.95)
plt.sca(ax)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.tick_params(direction='out',length=2,labelcolor=(0.5,0.5,0.5))
ax.set_xlim(-2, 52)
#ax.set_ylim(-0.52, 1.02)
plt.xticks([0,10,20,30,40,50],fontsize=6,fontname='Times New Roman')
plt.yticks(fontsize=6,fontname='Times New Roman')
ax.plot(hz_array,ChenEr1mean,'--k',linewidth=1.,label='$\itP_{bas}$')
#ax.plot(hz_array,ChenEr1mean+ChenEr1std,'--k',linewidth=0.1)
#ax.plot(hz_array,ChenEr1mean-ChenEr1std,'--k',linewidth=0.1)
#ax.fill_between(hz_array,ChenEr1mean+ChenEr1std,ChenEr1mean-ChenEr1std,color=(0.9,0.9,0.9),alpha=0.1)
ax.plot(hz_array,ChenEf1mean,'-k',linewidth=1.,label='$\itP_{sup}$')
#ax.plot(hz_array,ChenEf1mean+ChenEf1std,'-k',linewidth=0.1)
#ax.plot(hz_array,ChenEf1mean-ChenEf1std,'-k',linewidth=0.1)
#ax.fill_between(hz_array,ChenEf1mean+ChenEf1std,ChenEf1mean-ChenEf1std,color=(0.9,0.9,0.9),alpha=0.1)
ax.plot(hz_array_Free,ChenEr1mean_Free,'--b',linewidth=1.)    #,label='$\itP_{bas}$, Free'
#ax.plot(hz_array,ChenEr1mean+ChenEr1std,'--k',linewidth=0.1)
#ax.plot(hz_array,ChenEr1mean-ChenEr1std,'--k',linewidth=0.1)
#ax.fill_between(hz_array,ChenEr1mean+ChenEr1std,ChenEr1mean-ChenEr1std,color=(0.9,0.9,0.9),alpha=0.1)
ax.plot(hz_array_Free,ChenEf1mean_Free,'-b',linewidth=1.)    #,label='$\itP_{sup}$, Free'
#ax.plot(hz_array,ChenEf1mean+ChenEf1std,'-k',linewidth=0.1)
#ax.plot(hz_array,ChenEf1mean-ChenEf1std,'-k',linewidth=0.1)
#ax.fill_between(hz_array,ChenEf1mean+ChenEf1std,ChenEf1mean-ChenEf1std,color=(0.9,0.9,0.9),alpha=0.1)
ax.legend(loc='upper right',prop={'family':'Times New Roman','size':5},frameon=True,framealpha=0.1,ncol=2)
#plt.axhline(0,linestyle='--',color='k',linewidth=0.2)
#plt.xlabel('Pairing frequency (Hz)',fontdict={'family': 'Times New Roman','size':8})
plt.ylabel('Potential energy\n(fJ/$\mu m^2$)',fontdict={'family': 'Times New Roman','size':8})
plt.savefig('./IMG/'+'Fig2bb.eps', format='eps', dpi=1000)
plt.show()	

#fig, ax = plt.subplots(1, 1, figsize=(1.4, 1.0))
#fig.subplots_adjust(left=0.2, right=0.9, bottom=0.15, top=0.95)
fig, ax = plt.subplots(1, 1, figsize=(2.0, 1.4))
fig.subplots_adjust(left=0.3, right=0.9, bottom=0.3, top=0.9)
plt.sca(ax)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.tick_params(direction='out',length=2,labelcolor=(0.5,0.5,0.5))
ax.set_xlim(-2, 52)
#ax.set_ylim(-2, 202)
plt.xticks([0,10,20,30,40,50],fontsize=6,fontname='Times New Roman')
plt.yticks(fontsize=6,fontname='Times New Roman')    #[0,25,50,75,100,125,150,175,200],
ax.plot(hz_array,ChenW1mean,'-k',linewidth=1.,label='Our model')
ax.plot(hz_array,ChenW1mean+ChenW1std,'-k',linewidth=0.1)
ax.plot(hz_array,ChenW1mean-ChenW1std,'-k',linewidth=0.1)
ax.fill_between(hz_array,ChenW1mean+ChenW1std,ChenW1mean-ChenW1std,color=(0.95,0.95,0.95),alpha=0.1)
ax.plot(hz_array_Free,ChenW1mean_Free,'-b',linewidth=1.)   #,label='Chen, Free'
#ax.plot(hz_array,ChenW1mean+ChenW1std,'-k',linewidth=0.1)
#ax.plot(hz_array,ChenW1mean-ChenW1std,'-k',linewidth=0.1)
#ax.fill_between(hz_array,ChenW1mean+ChenW1std,ChenW1mean-ChenW1std,color=(0.9,0.9,0.9),alpha=0.1)
ax.errorbar(expfrq,expW1mean,yerr=expW1std,color='black',ecolor='gray',elinewidth=0.3,capsize=0.5,capthick=0.3,fmt='o',ms=0.1,label='Exp')
ax.legend(loc='lower right',prop={'family':'Times New Roman','size':5},frameon=True,framealpha=0.1)
plt.axhline(100,linestyle='--',color='k',linewidth=0.2)
plt.xlabel('Pairing frequency (Hz)',fontsize=8,fontname='Times New Roman')
plt.ylabel('Normalised weight\n(%)',fontsize=8,fontname='Times New Roman')
plt.savefig('./IMG/'+'Fig2bc.eps', format='eps', dpi=1000)
plt.show()	

#fig, ax = plt.subplots(1, 1, figsize=(1.4, 1.0))
fig, ax = plt.subplots(1, 1, figsize=(2.0, 1.4))
fig.subplots_adjust(left=0.3, right=0.9, bottom=0.3, top=0.9)
#fig, ax = plt.subplots(1, 1, figsize=(2, 1.4))
#fig.subplots_adjust(left=.15, right=.95, bottom=.15, top=.95)
plt.sca(ax)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.tick_params(direction='out',length=2,labelcolor=(0.5,0.5,0.5))
ax.set_xlim(-2, 52)
#ax.set_ylim(-0.52, 1.02)
plt.xticks([0,10,20,30,40,50],fontsize=6,fontname='Times New Roman')
plt.yticks(fontsize=6,fontname='Times New Roman')
ax.plot(hz_array,sign(ChenPE2mean)*(ChenMEdamp2mean*ChenMEmax2mean+MESmax0),'--r',linewidth=1.,label='$\itP_{max}$')
ax.plot(hz_array,ChenPE2mean,'-k',linewidth=1.,label='$\itP$')
#ax.plot(hz_array,ChenPE2mean+ChenPE2std,'-k',linewidth=0.1)
#ax.plot(hz_array,ChenPE2mean-ChenPE2std,'-k',linewidth=0.1)
#ax.fill_between(hz_array,ChenPE2mean+ChenPE2std,ChenPE2mean-ChenPE2std,color=(0.95,0.95,0.95),alpha=0.1)
ax.plot(hz_array_Free,ChenPE2mean_Free,'-b',linewidth=1.,label='$\itP_{free}$')
ax.plot(hz_array_Free,ChenPE2mean_Free+ChenPE2std_Free,'-b',linewidth=0.1)
ax.plot(hz_array_Free,ChenPE2mean_Free-ChenPE2std_Free,'-b',linewidth=0.1)
ax.fill_between(hz_array_Free,ChenPE2mean_Free+ChenPE2std_Free,ChenPE2mean_Free-ChenPE2std_Free,color=(0.95,0.95,1.0),alpha=0.1)
#ax.legend(loc='lower left',prop={'family':'Times New Roman','size':4},frameon=True,framealpha=0.1)
#plt.axhline(0,linestyle='--',color='k',linewidth=0.2)
#plt.xlabel('Pairing frequency (Hz)',fontdict={'family': 'Times New Roman','size':8})
#plt.ylabel('Potential energy\n(fJ/$\mu m^2$)',fontdict={'family': 'Times New Roman','size':8})
plt.savefig('./IMG/'+'Fig2ca.eps', format='eps', dpi=1000)
plt.show()	

#fig, ax = plt.subplots(1, 1, figsize=(1.4, 1.0))
fig, ax = plt.subplots(1, 1, figsize=(2.0, 1.4))
fig.subplots_adjust(left=0.3, right=0.9, bottom=0.3, top=0.9)
#fig, ax = plt.subplots(1, 1, figsize=(2, 1.4))
#fig.subplots_adjust(left=.15, right=.95, bottom=.15, top=.95)
plt.sca(ax)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.tick_params(direction='out',length=2,labelcolor=(0.5,0.5,0.5))
ax.set_xlim(-2, 52)
#ax.set_ylim(-0.52, 1.02)
plt.xticks([0,10,20,30,40,50],fontsize=6,fontname='Times New Roman')
plt.yticks(fontsize=6,fontname='Times New Roman')
ax.plot(hz_array,ChenEr2mean,'--k',linewidth=1.,label='$\itP_{bas}$')
#ax.plot(hz_array,ChenEr2mean+ChenEr2std,'--k',linewidth=0.1)
#ax.plot(hz_array,ChenEr2mean-ChenEr2std,'--k',linewidth=0.1)
#ax.fill_between(hz_array,ChenEr2mean+ChenEr2std,ChenEr2mean-ChenEr2std,color=(0.9,0.9,0.9),alpha=0.1)
ax.plot(hz_array,ChenEf2mean,'-k',linewidth=1.,label='$\itP_{sup}$')
#ax.plot(hz_array,ChenEf2mean+ChenEf2std,'-k',linewidth=0.1)
#ax.plot(hz_array,ChenEf2mean-ChenEf2std,'-k',linewidth=0.1)
#ax.fill_between(hz_array,ChenEf2mean+ChenEf2std,ChenEf2mean-ChenEf2std,color=(0.9,0.9,0.9),alpha=0.1)
ax.plot(hz_array_Free,ChenEr2mean_Free,'--b',linewidth=1.,label='$\itP_{bas}$, Free')
#ax.plot(hz_array,ChenEr2mean+ChenEr2std,'--k',linewidth=0.1)
#ax.plot(hz_array,ChenEr2mean-ChenEr2std,'--k',linewidth=0.1)
#ax.fill_between(hz_array,ChenEr2mean+ChenEr2std,ChenEr2mean-ChenEr2std,color=(0.9,0.9,0.9),alpha=0.1)
ax.plot(hz_array_Free,ChenEf2mean_Free,'-b',linewidth=1.,label='$\itP_{sup}$, Free')
#ax.plot(hz_array,ChenEf2mean+ChenEf2std,'-k',linewidth=0.1)
#ax.plot(hz_array,ChenEf2mean-ChenEf2std,'-k',linewidth=0.1)
#ax.fill_between(hz_array,ChenEf2mean+ChenEf2std,ChenEf2mean-ChenEf2std,color=(0.9,0.9,0.9),alpha=0.1)
#ax.legend(loc='lower left',prop={'family':'Times New Roman','size':4},frameon=True,framealpha=0.1)
#plt.axhline(0,linestyle='--',color='k',linewidth=0.2)
#plt.xlabel('Pairing frequency (Hz)',fontdict={'family': 'Times New Roman','size':8})
#plt.ylabel('Potential energy\n(fJ/$\mu m^2$)',fontdict={'family': 'Times New Roman','size':8})
plt.savefig('./IMG/'+'Fig2cb.eps', format='eps', dpi=1000)
plt.show()	

#fig, ax = plt.subplots(1, 1, figsize=(1.4, 1.0))
#fig.subplots_adjust(left=0.2, right=0.9, bottom=0.15, top=0.95)
fig, ax = plt.subplots(1, 1, figsize=(2.0, 1.4))
fig.subplots_adjust(left=0.3, right=0.9, bottom=0.3, top=0.9)
plt.sca(ax)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.tick_params(direction='out',length=2,labelcolor=(0.5,0.5,0.5))
ax.set_xlim(-2, 52)
#ax.set_ylim(-2, 202)
plt.xticks([0,10,20,30,40,50],fontsize=6,fontname='Times New Roman')
plt.yticks(fontsize=6,fontname='Times New Roman')    #[0,25,50,75,100,125,150,175,200],
ax.plot(hz_array,ChenW2mean,'-k',linewidth=1.,label='Chen')
ax.plot(hz_array,ChenW2mean+ChenW2std,'-k',linewidth=0.1)
ax.plot(hz_array,ChenW2mean-ChenW2std,'-k',linewidth=0.1)
ax.fill_between(hz_array,ChenW2mean+ChenW2std,ChenW2mean-ChenW2std,color=(0.95,0.95,0.95),alpha=0.1)
ax.plot(hz_array_Free,ChenW2mean_Free,'-b',linewidth=1.,label='Our model, Free')
#ax.plot(hz_array,ChenW2mean+ChenW2std,'-k',linewidth=0.1)
#ax.plot(hz_array,ChenW2mean-ChenW2std,'-k',linewidth=0.1)
#ax.fill_between(hz_array,ChenW2mean+ChenW2std,ChenW2mean-ChenW2std,color=(0.9,0.9,0.9),alpha=0.1)
ax.errorbar(expfrq,expW2mean,yerr=expW2std,color='black',ecolor='gray',elinewidth=0.3,capsize=0.5,capthick=0.3,fmt='o',ms=0.1,label='Exp')
#ax.legend(loc='upper left',prop={'family':'Times New Roman','size':4},frameon=True,framealpha=0.1)
plt.axhline(100,linestyle='--',color='k',linewidth=0.2)
plt.xlabel('Pairing frequency (Hz)',fontsize=8,fontname='Times New Roman')
#plt.ylabel('Normalised weight\n(%)',fontsize=8,fontname='Times New Roman')
plt.savefig('./IMG/'+'Fig2cc.eps', format='eps', dpi=1000)
plt.show()	


